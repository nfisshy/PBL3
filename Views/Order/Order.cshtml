@model List<PBL3.DTO.Buyer.OrderDTO>
@{
    ViewBag.Title = "Thanh toán";
    Layout = "~/Views/Shared/BuyerLayout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order List</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
        }
        .card {
            background-color: white;
            border-radius: 0.75rem; /* Tailwind's rounded-xl */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); /* Tailwind's shadow-lg */
            margin-bottom: 1.5rem; /* Tailwind's mb-6 */
            overflow: hidden;
        }
        .card-header {
            padding: 1rem 1.5rem; /* Tailwind's p-4 sm:p-6 */
            background-color: #f9fafb; /* Tailwind's gray-50 */
            border-bottom: 1px solid #e5e7eb; /* Tailwind's border-gray-200 */
        }
        .product-image {
            width: 80px; /* Tailwind's w-20 */
            height: 80px; /* Tailwind's h-20 */
            object-fit: cover;
            border-radius: 0.375rem; /* Tailwind's rounded-md */
            border: 1px solid #e5e7eb; /* Tailwind's border-gray-200 */
        }
        .section-title {
            font-size: 0.875rem; /* Tailwind's text-sm */
            font-weight: 600; /* Tailwind's font-semibold */
            color: #4b5563; /* Tailwind's text-gray-600 */
            margin-bottom: 0.5rem; /* Tailwind's mb-2 */
            text-transform: uppercase;
        }
        .info-text {
            font-size: 0.875rem; /* Tailwind's text-sm */
            color: #374151; /* Tailwind's text-gray-700 */
        }
        .price-text {
            font-weight: 600; /* Tailwind's font-semibold */
            color: #1f2937; /* Tailwind's text-gray-800 */
        }
        .total-summary-item {
            display: flex;
            justify-content: space-between;
            padding-top: 0.5rem; /* Tailwind's py-2 */
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #f3f4f6; /* Tailwind's border-gray-100 */
        }
        .total-summary-item:last-child {
            border-bottom: none;
        }
        .action-button {
            display: inline-block;
            padding: 0.75rem 1.5rem; /* Tailwind's px-6 py-3 */
            background-color: #4f46e5; /* Tailwind's bg-indigo-600 */
            color: white;
            font-weight: 500; /* Tailwind's font-medium */
            border-radius: 0.375rem; /* Tailwind's rounded-md */
            text-align: center;
            transition: background-color 0.2s;
            width: 100%;
        }
        .action-button:hover {
            background-color: #4338ca; /* Tailwind's bg-indigo-700 */
        }

        /* Grid for two-column layout */
        .order-content-grid {
            display: grid;
            grid-template-columns: 1fr; /* Default to single column for mobile */
            gap: 1.5rem; /* Tailwind's gap-6. Applies to rows on mobile and columns on md+ */
        }

        @@media (min-width: 768px) { /* Tailwind's md breakpoint */
            .order-content-grid {
                grid-template-columns: 3fr 2fr; /* Two columns for medium screens and up */
            }
        }
    </style>
</head>
<body class="p-4 md:p-8">

    <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-6 md:mb-8 text-center">My Orders</h1>

    @if (Model == null || !Model.Any())
    {
        <div class="text-center text-gray-500">
            <p>No orders found.</p>
            <p class="mt-2 text-sm">You haven't placed any orders yet, or there was an issue loading your orders.</p>
        </div>
    }
    else
    {
        <div class="container mx-auto max-w-7xl">
            <div class="flex flex-col lg:flex-row gap-8">
                <!-- Left: Order List -->
                <div class="lg:w-2/3 w-full space-y-6">
                    @foreach (var order in Model)
                    {
                        <div class="card">
                            <div class="card-header">
                                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center">
                                    <div>
                                        <h2 class="text-lg font-semibold text-indigo-600">Order ID: @order.OrderId</h2>
                                        <p class="text-xs text-gray-500">Seller: <span class="font-medium text-gray-700">@order.SellerName</span></p>
                                    </div>
                                    <div class="mt-2 sm:mt-0 text-left sm:text-right">
                                        <p class="text-sm text-gray-600">Date: @order.OrderDate.ToString("yyyy-MM-dd HH:mm")</p>
                                        <p class="text-sm font-medium">
                                            Status:
                                            @if (order.OrderStatus.ToString() == "Delivered") {
                                                <span class="text-green-600">@order.OrderStatus</span>
                                            } else if (order.OrderStatus.ToString() == "Shipped") {
                                                <span class="text-blue-600">@order.OrderStatus</span>
                                            } else if (order.OrderStatus.ToString() == "Cancelled") {
                                                <span class="text-red-600">@order.OrderStatus</span>
                                            } else {
                                                <span class="text-yellow-600">@order.OrderStatus</span>
                                            }
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div class="p-4 md:p-6">
                                <div class="product-list-section bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
                                    <h3 class="text-md font-semibold text-gray-700 mb-4">Items in this Order</h3>
                                    @if (order.OrderDetails != null && order.OrderDetails.Any())
                                    {
                                        foreach (var detail in order.OrderDetails)
                                        {
                                            <div class="flex items-start py-3 border-b border-gray-100 last:border-b-0">
                                                @{
                                                    string imgSrc = $"https://placehold.co/80x80/e2e8f0/cbd5e0?text=No+Image&font=inter";
                                                    if (detail.Image != null && detail.Image.Length > 0)
                                                    {
                                                        try
                                                        {
                                                            var base64 = Convert.ToBase64String(detail.Image);
                                                            imgSrc = String.Format("data:image/jpeg;base64,{0}", base64); // Assuming JPEG
                                                        }
                                                        catch { }
                                                    }
                                                }
                                                <img src="@imgSrc" alt="@detail.ProductName" class="product-image mr-4" onerror="this.onerror=null;this.src='https://placehold.co/80x80/e2e8f0/cbd5e0?text=Error&font=inter';"/>
                                                <div class="flex-grow">
                                                    <p class="font-medium text-gray-800">@detail.ProductName</p>
                                                    <p class="text-xs text-gray-500">Quantity: @detail.Quantity</p>
                                                </div>
                                                <div class="text-right ml-4">
                                                    <p class="price-text vnd-format">@detail.TotalPrice.ToString("C")</p>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p class="info-text">No product details available for this order.</p>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <!-- Right: Address, Voucher, Payment -->
                <div class="lg:w-1/3 w-full space-y-6">
                    @{
                        var firstOrder = Model.FirstOrDefault();
                    }
                    @if (firstOrder != null)
                    {
                        <div class="bg-white rounded-lg shadow p-6 address-box">
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-lg font-semibold text-gray-700">Giao tới</h2>
                                <a href="#" class="text-sm text-indigo-600 hover:text-indigo-800 font-medium">Thay đổi</a>
                            </div>
                            <div class="text-gray-600">
                                <p class="font-semibold">@firstOrder.BuyerName | @firstOrder.BuyerPhone</p>
                                <p class="text-sm">@firstOrder.Address</p>
                            </div>
                        </div>
                        <div class="bg-white rounded-lg shadow p-6 sticky top-8">
                            <div class="mb-6 voucher-box p-4">
                                <h3 class="text-md font-semibold text-gray-700 mb-2">Mã khuyến mãi</h3>
                                <div class="flex items-center gap-2 mb-2">
                                    <input type="text" id="voucherCode" placeholder="Nhập mã khuyến mãi" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                                    <button id="applyVoucherBtn" class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-4 rounded-md text-sm whitespace-nowrap">Áp dụng</button>
                                </div>
                                <a href="#" class="text-sm text-indigo-600 hover:text-indigo-800 font-medium">Chọn hoặc nhập mã khác &gt;</a>
                            </div>
                            <h2 class="text-xl font-semibold text-gray-800 border-b border-gray-200 pb-4 mb-4">Thanh toán</h2>
                            <div class="space-y-2 mb-4">
                                <div class="flex justify-between text-gray-700">
                                    <span>Tạm tính</span>
                                    <span class="font-medium vnd-format">@firstOrder.OrderPrice.ToString("N0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))₫</span>
                                </div>
                                <div class="flex justify-between text-gray-700">
                                    <span>Giảm giá voucher</span>
                                    <span class="font-medium vnd-format">0₫</span>
                                </div>
                                <div class="flex justify-between text-gray-700">
                                    <span>Giảm giá khác</span>
                                    <span class="font-medium vnd-format">0₫</span>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label for="paymentMethod" class="block text-gray-700 font-medium mb-1">Phương thức thanh toán</label>
                                <select id="paymentMethod" name="paymentMethod" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 text-sm">
                                @foreach (var method in Enum.GetValues(typeof(PBL3.Enums.PayMethod)))
                                {
                                    var isSelected = firstOrder.PaymentMethod == (PBL3.Enums.PayMethod)method ? "selected" : "";
                                    <option value="@method" isSelected>
                                        @(method.ToString() == "CashOnDelivery" ? "Thanh toán khi nhận hàng" :
                                        method.ToString() == "WalletPayment" ? "Ví điện tử" : method.ToString())
                                    </option>
                                }
                                </select>
                            </div>
                            <hr class="my-4 border-gray-200">
                            <div class="flex justify-between font-semibold text-lg text-gray-800 mb-1">
                                <span>Tổng tiền</span>
                                <span class="text-indigo-600 vnd-format">@firstOrder.OrderPrice.ToString("N0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))₫</span>
                            </div>
                            <button class="bg-green-500 hover:bg-green-600 text-white font-semibold py-3 px-6 rounded-lg w-full mt-4">Mua Hàng</button>
                            <p class="text-center text-red-500 text-sm mt-2">Vui lòng chọn sản phẩm để tiếp tục.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @functions {
        // public enum OrdStatus { Pending, Confirmed, Shipped, Delivered, Cancelled }
        // public enum PayMethod { COD, CreditCard, PayPal, BankTransfer }

        // public class OrderDTO
        // {
        //     public int OrderId { get; set; }
        //     public int BuyerId { get; set; }
        //     public int SellerId { get; set; }
        //     public DateTime OrderDate { get; set; }
        //     public decimal OrderPrice { get; set; }
        //     public OrdStatus OrderStatus { get; set; }
        //     public PayMethod PaymentMethod { get; set; }
        //     public bool PaymentStatus { get; set; }
        //     public List<OrderDetailDTO> OrderDetails { get; set; }
        //     public string BuyerName { get; set; }
        //     public string SellerName { get; set; }
        //     public string Address { get; set; }
        //     public string BuyerPhone { get; set; }
        // }

        // public class OrderDetailDTO
        // {
        //     public int ProductId { get; set; }
        //     public string ProductName { get; set; }
        //     public int Quantity { get; set; }
        //     public decimal TotalPrice { get; set; }
        //     public byte[]? Image { get; set; }
        // }
    }

    <script>
        function formatCurrencyVND(value) {
            if (!value) return '';
            let num = Number(value.toString().replace(/[^\d.-]/g, ''));
            if (isNaN(num)) return value;
            return num.toLocaleString('vi-VN') + '₫';
        }
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.vnd-format').forEach(function(el) {
                let raw = el.innerText || el.textContent;
                el.innerText = formatCurrencyVND(raw);
            });
        });
    </script>
</body>
</html>
